/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MutualFund } from "./MutualFund";
import { MutualFundCountArgs } from "./MutualFundCountArgs";
import { MutualFundFindManyArgs } from "./MutualFundFindManyArgs";
import { MutualFundFindUniqueArgs } from "./MutualFundFindUniqueArgs";
import { CreateMutualFundArgs } from "./CreateMutualFundArgs";
import { UpdateMutualFundArgs } from "./UpdateMutualFundArgs";
import { DeleteMutualFundArgs } from "./DeleteMutualFundArgs";
import { MutualFundService } from "../mutualFund.service";
@graphql.Resolver(() => MutualFund)
export class MutualFundResolverBase {
  constructor(protected readonly service: MutualFundService) {}

  async _mutualFundsMeta(
    @graphql.Args() args: MutualFundCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MutualFund])
  async mutualFunds(
    @graphql.Args() args: MutualFundFindManyArgs
  ): Promise<MutualFund[]> {
    return this.service.mutualFunds(args);
  }

  @graphql.Query(() => MutualFund, { nullable: true })
  async mutualFund(
    @graphql.Args() args: MutualFundFindUniqueArgs
  ): Promise<MutualFund | null> {
    const result = await this.service.mutualFund(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MutualFund)
  async createMutualFund(
    @graphql.Args() args: CreateMutualFundArgs
  ): Promise<MutualFund> {
    return await this.service.createMutualFund({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MutualFund)
  async updateMutualFund(
    @graphql.Args() args: UpdateMutualFundArgs
  ): Promise<MutualFund | null> {
    try {
      return await this.service.updateMutualFund({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MutualFund)
  async deleteMutualFund(
    @graphql.Args() args: DeleteMutualFundArgs
  ): Promise<MutualFund | null> {
    try {
      return await this.service.deleteMutualFund(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
