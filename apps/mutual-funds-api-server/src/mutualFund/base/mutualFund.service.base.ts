/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MutualFund as PrismaMutualFund } from "@prisma/client";

export class MutualFundServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MutualFundCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mutualFund.count(args);
  }

  async mutualFunds(
    args: Prisma.MutualFundFindManyArgs
  ): Promise<PrismaMutualFund[]> {
    return this.prisma.mutualFund.findMany(args);
  }
  async mutualFund(
    args: Prisma.MutualFundFindUniqueArgs
  ): Promise<PrismaMutualFund | null> {
    return this.prisma.mutualFund.findUnique(args);
  }
  async createMutualFund(
    args: Prisma.MutualFundCreateArgs
  ): Promise<PrismaMutualFund> {
    return this.prisma.mutualFund.create(args);
  }
  async updateMutualFund(
    args: Prisma.MutualFundUpdateArgs
  ): Promise<PrismaMutualFund> {
    return this.prisma.mutualFund.update(args);
  }
  async deleteMutualFund(
    args: Prisma.MutualFundDeleteArgs
  ): Promise<PrismaMutualFund> {
    return this.prisma.mutualFund.delete(args);
  }
}
