/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MutualFundService } from "../mutualFund.service";
import { MutualFundCreateInput } from "./MutualFundCreateInput";
import { MutualFund } from "./MutualFund";
import { MutualFundFindManyArgs } from "./MutualFundFindManyArgs";
import { MutualFundWhereUniqueInput } from "./MutualFundWhereUniqueInput";
import { MutualFundUpdateInput } from "./MutualFundUpdateInput";

export class MutualFundControllerBase {
  constructor(protected readonly service: MutualFundService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MutualFund })
  async createMutualFund(
    @common.Body() data: MutualFundCreateInput
  ): Promise<MutualFund> {
    return await this.service.createMutualFund({
      data: data,
      select: {
        amcName: true,
        createdAt: true,
        fundType: true,
        id: true,
        inceptionDate: true,
        nav: true,
        schemeName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MutualFund] })
  @ApiNestedQuery(MutualFundFindManyArgs)
  async mutualFunds(@common.Req() request: Request): Promise<MutualFund[]> {
    const args = plainToClass(MutualFundFindManyArgs, request.query);
    return this.service.mutualFunds({
      ...args,
      select: {
        amcName: true,
        createdAt: true,
        fundType: true,
        id: true,
        inceptionDate: true,
        nav: true,
        schemeName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MutualFund })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mutualFund(
    @common.Param() params: MutualFundWhereUniqueInput
  ): Promise<MutualFund | null> {
    const result = await this.service.mutualFund({
      where: params,
      select: {
        amcName: true,
        createdAt: true,
        fundType: true,
        id: true,
        inceptionDate: true,
        nav: true,
        schemeName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MutualFund })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMutualFund(
    @common.Param() params: MutualFundWhereUniqueInput,
    @common.Body() data: MutualFundUpdateInput
  ): Promise<MutualFund | null> {
    try {
      return await this.service.updateMutualFund({
        where: params,
        data: data,
        select: {
          amcName: true,
          createdAt: true,
          fundType: true,
          id: true,
          inceptionDate: true,
          nav: true,
          schemeName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MutualFund })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMutualFund(
    @common.Param() params: MutualFundWhereUniqueInput
  ): Promise<MutualFund | null> {
    try {
      return await this.service.deleteMutualFund({
        where: params,
        select: {
          amcName: true,
          createdAt: true,
          fundType: true,
          id: true,
          inceptionDate: true,
          nav: true,
          schemeName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
